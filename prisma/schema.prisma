generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS_ONLY
  PRIVATE
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String  @unique
  hash  String?

  userName    String  @unique
  displayName String?
  bio         String?

  firstName String?
  lastName  String?

  posts     Post[]
  likes     Like[]
  bookmarks Bookmark[]
  retweets  Retweet[]
  quotes    Quote[]

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  pinnedPostId String?
  pinnedPost   Post?   @relation("PinnedPost", fields: [pinnedPostId], references: [id])

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  link    String?

  visibility PostVisibility @default(PUBLIC)
  isPinned   Boolean        @default(false)
  isDeleted  Boolean        @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Replies
  replies   Post[]  @relation("ReplyThread")
  replyToId String?
  replyTo   Post?   @relation("ReplyThread", fields: [replyToId], references: [id])

  // Quotes & Retweets
  retweets Retweet[]
  quotes   Quote[]

  // Engagement
  likes     Like[]
  bookmarks Bookmark[]

  pinnedBy User[] @relation("PinnedPost")

  @@index([userId, createdAt])
  @@map("posts")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Retweet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("retweets")
}

model Quote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  content String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@map("quotes")
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}
